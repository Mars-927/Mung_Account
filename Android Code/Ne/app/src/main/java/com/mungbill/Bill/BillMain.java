package com.mungbill.Bill;import static androidx.recyclerview.widget.RecyclerView.*;import androidx.appcompat.app.AppCompatActivity;import android.annotation.SuppressLint;import android.app.DatePickerDialog;import android.app.Dialog;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.graphics.Typeface;import android.os.Bundle;import android.os.Parcelable;import android.util.Log;import android.view.Gravity;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.DatePicker;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import com.google.android.material.floatingactionbutton.FloatingActionButton;import com.mungbill.Account.AccountClass;import com.mungbill.Analyse.AnalyseActivity;import com.mungbill.DataBase.DatabaseHelper;import com.mungbill.Init.Initial;import com.mungbill.LoginSignin.LoginSignin;import com.mungbill.LoginSignin.Signin;import com.mungbill.R;import com.util.CloudDBToClient;import com.util.CloudDBToServer;import com.util.GetLogoResId;import com.util.NoDoubleClickListener;import com.util.Timeabout;import com.util.ToastUtil;import java.text.DecimalFormat;import java.text.NumberFormat;import java.text.SimpleDateFormat;import java.time.Month;import java.time.Year;import java.util.ArrayList;import java.util.Calendar;import java.util.Comparator;import java.util.Date;import java.util.List;class Bill {    String type;    String date;    double num;    int year;    int month;    int day;    AccountClass Billdetail;    public Bill(String type, String date, double num,AccountClass Detail) {        this.type = type;        this.date = date;        this.num = num;        this.year = Detail.BillDateToY();        this.month = Detail.BillDateToM();        this.day = Integer.parseInt(Detail.BillDateToD());        this.Billdetail = Detail;    }    public String getType() {        return type;    }    public String getDate() {        return date;    }    public double getNum() {        return num;    }    public AccountClass getDetail(){ return  Billdetail ; }    public String GetTimeLineForSort(){return Billdetail.getBillDate();}}public class BillMain extends AppCompatActivity {    TextView tit, in, out, in_out;    LinearLayout layout;    ArrayList<Bill> list = new ArrayList<>();    ListView lv_list;    TextView type1, type2;    TextView date1, date2;    TextView num1, num2;    TextView left, right;    int year;    int month;    int day;    FloatingActionButton AddButton;    double In = 0, Out = 0;    private DatabaseHelper databaseHelper;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // 判定是否是第一次登录        if(Initial.IsLogin == Boolean.FALSE){            Intent intent = new Intent();            intent.setClass(BillMain.this, LoginSignin.class);            startActivity(intent);        }        //判定登录超时        if(Initial.EndLogin != null && Timeabout.daysBetween(new Date(),Initial.EndLogin,30)){            Intent intent = new Intent();            intent.setClass(BillMain.this, LoginSignin.class);            startActivity(intent);        }        //重置登录时间        Initial.IsLogin = Boolean.TRUE;        Initial.EndLogin = new Date();        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        String dateString = formatter.format(Initial.EndLogin);        SharedPreferences sp = getSharedPreferences("UserInfo", Initial.MODE_PRIVATE);        sp.edit().putString("UserName",Initial.UserName).putBoolean("IsLogin", Initial.IsLogin).putString("Date",dateString).commit();        //云同步数据库        //初始化数据库        databaseHelper = new DatabaseHelper(BillMain.this);        // 获取layout        setContentView(R.layout.activity_bill_main);        // 获取组件        tit = findViewById(R.id.text_title);        in = findViewById(R.id.in);        out = findViewById(R.id.out);        in_out = findViewById(R.id.in_out);        layout = findViewById(R.id.layout);        AddButton = findViewById(R.id.fab);        left = findViewById(R.id.left);        right = findViewById(R.id.right);        //引入iconfont        Typeface iconfont = Typeface.createFromAsset(getAssets(), "iconfont.ttf");        left.setTypeface(iconfont);        left.setText(getResources().getString(R.string.yonghu));        right.setTypeface(iconfont);        right.setText(getResources().getString(R.string.tubiao));        //跳转到个人界面        left.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                ToastUtil.toastShort(BillMain.this,"敬请期待~");            }        });        //跳转到统计界面        right.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent();                intent.setClass(BillMain.this, AnalyseActivity.class);                startActivity(intent);            }        });        //获取当前年月        Calendar c1 = Calendar.getInstance();        year = c1.get(Calendar.YEAR);        month = c1.get(Calendar.MONTH)+1;        day = c1.get(Calendar.DATE);        c1.set(year, month-1, day);        SimpleDateFormat sdf1 = new SimpleDateFormat("YYYY-MM");        String textString1 = sdf1.format(c1.getTime());        tit.setText(textString1);        //修改年月日选项-顶栏选择        layout.setOnClickListener(new View.OnClickListener() {            Calendar c2 = Calendar.getInstance();            @SuppressLint("ResourceType")            public void onClick(View v) {                new YearAndMonthPickerDialog(BillMain.this, 3, new YearAndMonthPickerDialog.OnDateSetListener() {                    @Override                    public void onDateSet(DatePicker startDatePicker, int Year, int MonthOfYear, int DayOfMonth) {                        c2.set(Year, MonthOfYear, DayOfMonth);                        SimpleDateFormat sdf2 = new SimpleDateFormat("YYYY-MM");                        String textString2 = sdf2.format(c2.getTime());                        tit.setText(textString2);                        year = c2.get(Calendar.YEAR);                        month = c2.get(Calendar.MONTH) + 1;                        UpdateValue();                    }                }, c2.get(Calendar.YEAR), c2.get(Calendar.MONTH), c2.get(Calendar.DATE)).show();            }        });        // 从增添按钮进入添加界面        AddButton.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                if (NoDoubleClickListener.isFastDoubleClick()) {                    // 避免重复点击                    return;                }                Intent intent = new Intent();                intent.setClass(BillMain.this, record_Activity.class);                intent.putExtra("From","Add");                startActivity(intent);            }        });        // 获取adapter        lv_list = (ListView) findViewById(R.id.lv_list);        // 获取数据 并设定        UpdateValue();    }    class MyAdapter extends BaseAdapter {        @Override        //设置适配器中数据集的数据个数（ListView要显示的所有数据行）；        public int getCount() {            return list.size();        }        @Override        //获取数据集中与索引对应的数据项；        public Object getItem(int position) {            return list.get(position);        }        @Override        //获取指定行对应的ID,一般都是直接返回position        public long getItemId(int position) {            return position;        }        @Override        //获取每一行Item的显示内容。        // position:表示当前获取的Item是哪一行,开头从0开始        // convertView:旧视图复用,如果convertView不为空则表示可以用来复用.无需再次new一个view来使用.        // ViewGroup:只有LinearLayout或者RelativeLayout,如果viewGroup传入一个具体的对象,那么这个方法创建出来的view对象将作为这个viewGroup的childView来显示.        public View getView(int position, View convertView, ViewGroup parent) {            View view = null;            //如果convertView为空则需要重新创建资源视图,如果不为空则表示可以用来复用.无需再次new一个view来使用.            if (convertView == null) {                //通过R.layout.item 来创建一个item视图资源                view = LayoutInflater.from(getApplicationContext()).inflate(R.layout.items, null);            } else {                view = convertView;            }            //设置要显示的内容            type1 = (TextView) view.findViewById(R.id.type);            date1 = (TextView) view.findViewById(R.id.date);            num1 = (TextView) view.findViewById(R.id.num);            LinearLayout list_item = (LinearLayout) view.findViewById(R.id.list_item);            // 根据类型设定图标            String ImgFlag = list.get(position).getType();            ImageView Logo =  view.findViewById(R.id.image);            Logo.setImageResource(GetLogoResId.Get(ImgFlag));            // 设定金额            type1.setText(list.get(position).getType());            date1.setText(list.get(position).getDate());            //判断金额正负            if (list.get(position).getNum() < 0) {                //设置颜色                num1.setTextColor(Color.parseColor("#FF0000"));                //显示小数点后两位                NumberFormat nf = new DecimalFormat("0.00");                String str = nf.format(list.get(position).getNum());                num1.setText(str);            } else {                //设置颜色                num1.setTextColor(Color.parseColor("#b0ce95"));                //显示小数点后两位                NumberFormat nf = new DecimalFormat("0.00");                String str = nf.format(list.get(position).getNum());                num1.setText("+" + str);            }            list_item.setOnClickListener(new OnClickListener() {                @Override                public void onClick(View v) {                    show(position);                }            });            return view;        }    }    //show底部对话框    void show(int position) {        Dialog bottomDialog = new Dialog(this, R.style.BottomDialog);        View contentView = LayoutInflater.from(this).inflate(R.layout.dialog, null);        bottomDialog.setContentView(contentView);        ViewGroup.LayoutParams layoutParams = contentView.getLayoutParams();        layoutParams.width = getResources().getDisplayMetrics().widthPixels;        contentView.setLayoutParams(layoutParams);        bottomDialog.getWindow().setGravity(Gravity.BOTTOM);        bottomDialog.setCanceledOnTouchOutside(true);        bottomDialog.getWindow().setWindowAnimations(R.style.BottomDialog_Animation);        bottomDialog.show();        TextView del = bottomDialog.findViewById(R.id.del);        TextView modify = bottomDialog.findViewById(R.id.modify);        num2 = bottomDialog.findViewById(R.id.num);        type2 = bottomDialog.findViewById(R.id.type);        date2 = bottomDialog.findViewById(R.id.date);        //判断数字正负        if (list.get(position).getNum() < 0) {            //显示小数点后两位            NumberFormat nf = new DecimalFormat("0.00");            String str = nf.format(-list.get(position).getNum());            num2.setText(str);        } else {            //显示小数点后两位            NumberFormat nf = new DecimalFormat("0.00");            String str = nf.format(list.get(position).getNum());            num2.setText(str);        }        type2.setText(list.get(position).getType());        date2.setText(list.get(position).getDate());        del.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                databaseHelper.AccountDelect(list.get(position).getDetail());                list.remove(position);                lv_list.setAdapter(new MyAdapter());                In = 0; Out = 0;                set();                bottomDialog.cancel();            }        });        modify.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                if (NoDoubleClickListener.isFastDoubleClick()) {                    // 避免重复点击                    return;                }                Intent intent = new Intent();                intent.setClass(BillMain.this, record_Activity.class);                intent.putExtra("From", "Edit");                Bundle bundle = new Bundle();                bundle.putSerializable("Detail", list.get(position).getDetail());                intent.putExtras(bundle);                startActivity(intent);                bottomDialog.cancel();            }        });    }    //设置收入 支出总数    void set() {        In = 0;        Out = 0;        for (int i = 0; i < list.size(); i++) {            if (list.get(i).getNum() > 0) {                In = In + list.get(i).getNum();            }            if (list.get(i).getNum() < 0) {                Out = Out + list.get(i).getNum();            }        }        //显示小数点后两位        NumberFormat nf = new DecimalFormat("0.00");        String str1 = nf.format(In);        String str2 = nf.format(Out);        String str3 = nf.format(In + Out);        in.setText(str1);        out.setText(str2);        in_out.setText(str3);    }    // 本地数据库更新到内存    @Override    public boolean onKeyDown(int keyCode, KeyEvent event){        if(keyCode==KeyEvent.KEYCODE_BACK){            moveTaskToBack(true);            return true;//不执行父类点击事件        }        return super.onKeyDown(keyCode, event);//继续执行父类其他点击事件    }    void UpdateValue(){        list.clear();        List<AccountClass> GetDB = databaseHelper.GetAllinfo();        for(int i = 0;i<GetDB.size();i++){            list.add(new Bill(                    GetDB.get(i).getBillProperty(),                    GetDB.get(i).BillDateToMD(),                    GetDB.get(i).getBillCategory() == 1 ? GetDB.get(i).getBillMoney():(-1) * GetDB.get(i).getBillMoney(),                    GetDB.get(i)));        }        for(int i = 0;i<list.size();i++){            if(list.get(i).year != year || list.get(i).month != month){                list.remove(i--);            }        }        // 按照修改日期排序        list.sort(new Comparator<Bill>() {            @Override            public int compare(Bill poet1, Bill poet2) {                String score1 = poet1.GetTimeLineForSort();                String score2 = poet2.GetTimeLineForSort();                return score2.compareTo(score1);            }        });        set();        lv_list.setAdapter(new MyAdapter());        // 设定值到界面    }    @Override    protected void onResume() {        // 返回时调用        super.onResume();        UpdateValue();    }}